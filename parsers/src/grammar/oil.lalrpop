use tok::{self, Tok};
use std::str::FromStr;

grammar<'input>;

pub ui_package: () = {
    import* template_or_style_or_view* => (),
};

import: () = {
    "import" components "from" path ";" => {

    },
    "import" path ";" => {

    },
};

components: () = {
    "*" => (),
    "{" (ident ",")* ident? "}" => (),
    <font_or_img:ident> => {
        assert!(font_or_img == "$font" || font_or_img == "$img")
    },
};

template_or_style_or_view: () = {
    template,
    style,
    view,
};

path: &'input str = {
    "StringLiteral",
};

ident: &'input str = "Id";

// =================================
//          Templates
//

template: () = {
    export? "template" ident template_args? trigg_events? "=" node* ";" => (),
};

export: () = "export" => ();

template_args: () = {
    template_arg,
    "[" (template_arg ",")* template_arg? "]" => (),
};

template_arg: () = ident => ();

trigg_events: () = {
    "->" events => (),
};

events: () = {
    event,
    "(" (event ",")* event? ")" => (),
};

event: () = ident => ();

node: () = {
    // Some tag
    "<" <tag_open:ident> class? node_args* node_events* ">" node*
    "</" <tag_close:ident> ">" => {
        assert_eq!(tag_open, tag_close)
    },
    // Selection
    "<" <select:ident> ":" <query:ident> "/>" => {
        assert_eq!(select, "select");
        assert_eq!(query, "children")
    },
    node_text => (),
};

node_text: () = {
    // Text Node (pure text)
    "TextNode" => (),
    // A text binding
    "{" property "}" => (),
};

class: () = ident property_value => ();

node_args: () = {
    "[" ident "]" node_value => (),
};

node_events: () = {
    "(" ident ")" node_value => (),
};

node_value: () = {
    "=" "StringLiteral" => (),
    property_value => (),
};

property_value: () = {
    "=" "{" property "}" => (),
};

property: () = {
    ident => (),
    property "DotId" => (),
};

// =================================
//          Styles
//

style: () = {
    export? "DotId" "{" style_properties* "}" => (),
};

style_properties: () = {
    // "background-image" ":" "$img" => (),
    // "font" ":" "$font" => (),
    ident ":" style_value => (),
};

style_value: () = {
    "{" ident "}" => (),
    "Number" ident ";" => (),
    "Hex" ";" => (),
    <font_or_img:ident>  <prop:img_props?> ";" => {
        match prop {
            Some(_) => {
                assert_eq!(font_or_img, "$img")
            },
            None => {
                assert!(font_or_img == "$font" || font_or_img == "$img")
            }
        }
    },
};

img_props: () = {
    "[" (img_prop ",")* img_prop? "]" => (),
};

img_prop: () = {
    ident ":" "Number" => (),
    "Number" => (),
};

// =================================
//          View
//

view: () = {
    "view" "Id" view_args "=" node ";" => (),
};

view_args: () = {
    "(" ident "," ident ")" => (),
};

// =================================
//          Tokens
//
extern {
    type Location = usize;
    type Error = tok::Error;
    enum Tok<'input> {
        "import" => Tok::Import,
        "from" => Tok::From,
        "view" => Tok::View,
        "template" => Tok::Template,
        "export" => Tok::Export,

        // Special keywords accompanied by a series of
        // uninterpreted strings representing path
        "StringLiteral" => Tok::StringLiteral(<&'input str>),
        "Number" => Tok::Number(<&'input str>),
        "Hex" => Tok::Hex(<&'input str>),

        "TextNode" => Tok::TextNode(<&'input str>), // Includes binded properties

        // Identifiers of various kinds:
        "DotId" => Tok::DotId(<&'input str>), // excludes the '.'
        "Id" => Tok::Id(<&'input str>),

        "->" => Tok::Arrow,

        "{" => Tok::LeftBrace,
        "}" => Tok::RightBrace,
        "[" => Tok::LeftBracket,
        "]" => Tok::RightBracket,
        "(" => Tok::LeftParen,
        ")" => Tok::RightParen,
        "<" => Tok::LessThan,
        "</" => Tok::LessThanSlash,
        ">" => Tok::GreaterThan,
        "/>" => Tok::SlashGreaterThan,
        //"#" => Tok::Hash,
        //"?" => Tok::Question,
        "=" => Tok::Equals,
        "+" => Tok::Plus,
        "-" => Tok::Minus,
        ";" => Tok::Semi,
        "*" => Tok::Star,
        ":" => Tok::Colon,
        "," => Tok::Comma,
    }
}
